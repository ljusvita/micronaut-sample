plugins {
    id("com.gradleup.shadow") version "8.3.6"
    id("groovy") 
    id("io.micronaut.application") version "4.5.0"
    id("io.micronaut.aot") version "4.5.0"
    id("com.diffplug.spotless") version "7.0.3"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    // micronaut 기본 동작 라이브러리 설정
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    runtimeOnly("ch.qos.logback:logback-classic")

    // YAML 설정 파일 지원을 위한 의존성
    runtimeOnly("org.yaml:snakeyaml")

    testImplementation "io.micronaut:micronaut-http-client" 
    testAnnotationProcessor "io.micronaut:micronaut-inject-java" // micronaut 의 compile time 빈 정의 생성을 위한 추가 정의
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation('io.micronaut.test:micronaut-test-junit5')
}


application {
    mainClass = "com.example.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}


tasks.named("dockerfileNative") {
    jdkVersion = "21"
}

spotless {
//   format 'misc', {
//     // define the files to apply `misc` to
//     target '*.gradle', '.gitattributes', '.gitignore'

//     // define the steps to apply to those files
//     trimTrailingWhitespace()
//     leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
//     endWithNewline()
//   }
  java {
    // Use the default importOrder configuration
    importOrder()
    removeUnusedImports()
    cleanthat()          // has its own section below
    googleJavaFormat()   // has its own section below
    formatAnnotations()  // fixes formatting of type annotations, see below
    licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
  }
}